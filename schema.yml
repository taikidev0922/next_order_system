openapi: 3.0.3
info:
  title: ""
  version: 0.0.0
paths:
  /api/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Login"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWT"
          description: ""
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
        - auth
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/auth/password/change/:
    post:
      operationId: auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordChange"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/auth/password/reset/:
    post:
      operationId: auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordReset"
        required: true
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/auth/password/reset/confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
        required: true
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefresh"
          description: ""
  /api/auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenVerify"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenVerify"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenVerify"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenVerify"
          description: ""
  /api/auth/user/:
    get:
      operationId: auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - auth
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
    put:
      operationId: auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserDetails"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
    patch:
      operationId: auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
  /api/customers/:
    get:
      operationId: customers_list
      parameters:
        - in: query
          name: address
          schema:
            type: string
        - in: query
          name: deleted_at
          schema:
            type: string
            format: date-time
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: phone
          schema:
            type: string
      tags:
        - customers
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Customer"
          description: ""
    post:
      operationId: customers_create
      tags:
        - customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Customer"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Customer"
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: ""
  /api/customers/{customer_id}/:
    get:
      operationId: customers_retrieve
      parameters:
        - in: path
          name: customer_id
          schema:
            type: integer
          description: A unique integer value identifying this customer.
          required: true
      tags:
        - customers
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: ""
    put:
      operationId: customers_update
      parameters:
        - in: path
          name: customer_id
          schema:
            type: integer
          description: A unique integer value identifying this customer.
          required: true
      tags:
        - customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Customer"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Customer"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: ""
    patch:
      operationId: customers_partial_update
      parameters:
        - in: path
          name: customer_id
          schema:
            type: integer
          description: A unique integer value identifying this customer.
          required: true
      tags:
        - customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedCustomer"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedCustomer"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedCustomer"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: ""
    delete:
      operationId: customers_destroy
      parameters:
        - in: path
          name: customer_id
          schema:
            type: integer
          description: A unique integer value identifying this customer.
          required: true
      tags:
        - customers
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
  /api/customers/bulk_update/:
    put:
      operationId: customers_bulk_update_update
      tags:
        - customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Customer"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Customer"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: ""
  /api/orders/:
    get:
      operationId: orders_list
      tags:
        - orders
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
          description: ""
    post:
      operationId: orders_create
      tags:
        - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: ""
  /api/orders/{order_id}/:
    get:
      operationId: orders_retrieve
      parameters:
        - in: path
          name: order_id
          schema:
            type: integer
          description: A unique integer value identifying this order.
          required: true
      tags:
        - orders
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: ""
    put:
      operationId: orders_update
      parameters:
        - in: path
          name: order_id
          schema:
            type: integer
          description: A unique integer value identifying this order.
          required: true
      tags:
        - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: ""
    patch:
      operationId: orders_partial_update
      parameters:
        - in: path
          name: order_id
          schema:
            type: integer
          description: A unique integer value identifying this order.
          required: true
      tags:
        - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedOrder"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedOrder"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedOrder"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: ""
    delete:
      operationId: orders_destroy
      parameters:
        - in: path
          name: order_id
          schema:
            type: integer
          description: A unique integer value identifying this order.
          required: true
      tags:
        - orders
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
  /api/products/:
    get:
      operationId: products_list
      tags:
        - products
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
          description: ""
    post:
      operationId: products_create
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Product"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
  /api/products/{product_id}/:
    get:
      operationId: products_retrieve
      parameters:
        - in: path
          name: product_id
          schema:
            type: integer
          description: A unique integer value identifying this product.
          required: true
      tags:
        - products
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
    put:
      operationId: products_update
      parameters:
        - in: path
          name: product_id
          schema:
            type: integer
          description: A unique integer value identifying this product.
          required: true
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Product"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
    patch:
      operationId: products_partial_update
      parameters:
        - in: path
          name: product_id
          schema:
            type: integer
          description: A unique integer value identifying this product.
          required: true
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedProduct"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedProduct"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedProduct"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
    delete:
      operationId: products_destroy
      parameters:
        - in: path
          name: product_id
          schema:
            type: integer
          description: A unique integer value identifying this product.
          required: true
      tags:
        - products
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
components:
  schemas:
    Customer:
      type: object
      properties:
        customer_id:
          type: integer
          readOnly: true
        cookie:
          type: integer
        name:
          type: string
          maxLength: 100
        address:
          type: string
          maxLength: 255
        phone:
          type: string
          maxLength: 20
        deleted_at:
          type: string
          format: date-time
          nullable: true
      required:
        - address
        - customer_id
        - name
        - phone
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: "#/components/schemas/UserDetails"
      required:
        - access_token
        - refresh_token
        - user
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - password
    Order:
      type: object
      properties:
        order_id:
          type: integer
          readOnly: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        order_date:
          type: string
          format: date-time
          readOnly: true
        customer:
          type: integer
      required:
        - customer
        - items
        - order_date
        - order_id
    OrderItem:
      type: object
      properties:
        order_item_id:
          type: integer
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        order:
          type: integer
        product:
          type: integer
      required:
        - order
        - order_item_id
        - price
        - product
        - quantity
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
        - new_password1
        - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
        - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
        - new_password1
        - new_password2
        - token
        - uid
    PatchedCustomer:
      type: object
      properties:
        customer_id:
          type: integer
          readOnly: true
        cookie:
          type: integer
        name:
          type: string
          maxLength: 100
        address:
          type: string
          maxLength: 255
        phone:
          type: string
          maxLength: 20
        deleted_at:
          type: string
          format: date-time
          nullable: true
    PatchedOrder:
      type: object
      properties:
        order_id:
          type: integer
          readOnly: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        order_date:
          type: string
          format: date-time
          readOnly: true
        customer:
          type: integer
    PatchedProduct:
      type: object
      properties:
        product_id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Product:
      type: object
      properties:
        product_id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
      required:
        - description
        - name
        - price
        - product_id
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
        - detail
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
        - access
        - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
        - token
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
        - email
        - pk
        - username
  securitySchemes:
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "JWT"
