openapi: 3.0.2
info:
  title: ""
  version: ""
paths:
  /api/auth/logout/:
    get:
      operationId: listLogouts
      description: "Calls Django logout method and delete the Token object

        assigned to the current User object.


        Accepts/Returns nothing."
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ""
      tags:
        - api
    post:
      operationId: createLogout
      description: "Calls Django logout method and delete the Token object

        assigned to the current User object.


        Accepts/Returns nothing."
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        "201":
          content:
            application/json:
              schema: {}
          description: ""
      tags:
        - api
  /api/auth/user/:
    get:
      operationId: retrieveUserDetails
      description: "Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields."
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
      tags:
        - api
    put:
      operationId: updateUserDetails
      description: "Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserDetails"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
      tags:
        - api
    patch:
      operationId: partialUpdateUserDetails
      description: "Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserDetails"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
      tags:
        - api
  /api/customers/:
    get:
      operationId: listCustomers
      description: ""
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Customer"
          description: ""
      tags:
        - api
    post:
      operationId: createCustomer
      description: ""
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Customer"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: ""
      tags:
        - api
  /api/customers/{customer_id}/:
    get:
      operationId: retrieveCustomer
      description: ""
      parameters:
        - name: customer_id
          in: path
          required: true
          description: A unique integer value identifying this customer.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: ""
      tags:
        - api
    put:
      operationId: updateCustomer
      description: ""
      parameters:
        - name: customer_id
          in: path
          required: true
          description: A unique integer value identifying this customer.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Customer"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: ""
      tags:
        - api
    patch:
      operationId: partialUpdateCustomer
      description: ""
      parameters:
        - name: customer_id
          in: path
          required: true
          description: A unique integer value identifying this customer.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Customer"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: ""
      tags:
        - api
    delete:
      operationId: destroyCustomer
      description: ""
      parameters:
        - name: customer_id
          in: path
          required: true
          description: A unique integer value identifying this customer.
          schema:
            type: string
      responses:
        "204":
          description: ""
      tags:
        - api
  /api/products/:
    get:
      operationId: listProducts
      description: ""
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
          description: ""
      tags:
        - api
    post:
      operationId: createProduct
      description: ""
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Product"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
      tags:
        - api
  /api/products/{product_id}/:
    get:
      operationId: retrieveProduct
      description: ""
      parameters:
        - name: product_id
          in: path
          required: true
          description: A unique integer value identifying this product.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
      tags:
        - api
    put:
      operationId: updateProduct
      description: ""
      parameters:
        - name: product_id
          in: path
          required: true
          description: A unique integer value identifying this product.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Product"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
      tags:
        - api
    patch:
      operationId: partialUpdateProduct
      description: ""
      parameters:
        - name: product_id
          in: path
          required: true
          description: A unique integer value identifying this product.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Product"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
      tags:
        - api
    delete:
      operationId: destroyProduct
      description: ""
      parameters:
        - name: product_id
          in: path
          required: true
          description: A unique integer value identifying this product.
          schema:
            type: string
      responses:
        "204":
          description: ""
      tags:
        - api
  /api/orders/:
    get:
      operationId: listOrders
      description: ""
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
          description: ""
      tags:
        - api
    post:
      operationId: createOrder
      description: ""
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: ""
      tags:
        - api
  /api/orders/{order_id}/:
    get:
      operationId: retrieveOrder
      description: ""
      parameters:
        - name: order_id
          in: path
          required: true
          description: A unique integer value identifying this order.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: ""
      tags:
        - api
    put:
      operationId: updateOrder
      description: ""
      parameters:
        - name: order_id
          in: path
          required: true
          description: A unique integer value identifying this order.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: ""
      tags:
        - api
    patch:
      operationId: partialUpdateOrder
      description: ""
      parameters:
        - name: order_id
          in: path
          required: true
          description: A unique integer value identifying this order.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: ""
      tags:
        - api
    delete:
      operationId: destroyOrder
      description: ""
      parameters:
        - name: order_id
          in: path
          required: true
          description: A unique integer value identifying this order.
          schema:
            type: string
      responses:
        "204":
          description: ""
      tags:
        - api
  /api/auth/password/reset/:
    post:
      operationId: createPasswordReset
      description: "Calls Django Auth PasswordResetForm save method.


        Accepts the following POST parameters: email

        Returns the success/fail message."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordReset"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordReset"
          description: ""
      tags:
        - api
  /api/auth/password/reset/confirm/:
    post:
      operationId: createPasswordResetConfirm
      description:
        "Password reset e-mail link is confirmed, therefore\nthis resets\
        \ the user's password.\n\nAccepts the following POST parameters: token, uid,\n\
        \    new_password1, new_password2\nReturns the success/fail message."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetConfirm"
          description: ""
      tags:
        - api
  /api/auth/login/:
    post:
      operationId: createLogin
      description: "Check the credentials and return the REST Token

        if the credentials are valid and authenticated.

        Calls Django Auth login method to register User ID

        in Django session framework


        Accept the following POST parameters: username, password

        Return the REST Framework Token Object's key."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Login"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
          description: ""
      tags:
        - api
  /api/auth/password/change/:
    post:
      operationId: createPasswordChange
      description: "Calls Django Auth SetPasswordForm save method.


        Accepts the following POST parameters: new_password1, new_password2

        Returns the success/fail message."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordChange"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordChange"
          description: ""
      tags:
        - api
  /api/auth/token/verify/:
    post:
      operationId: createTokenVerify
      description:
        "Takes a token and indicates if it is valid.  This view provides
        no

        information about a token's fitness for a particular use."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenVerify"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenVerify"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenVerify"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenVerify"
          description: ""
      tags:
        - api
  /api/auth/token/refresh/:
    post:
      operationId: createCookieTokenRefresh
      description: ""
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CookieTokenRefresh"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CookieTokenRefresh"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CookieTokenRefresh"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CookieTokenRefresh"
          description: ""
      tags:
        - api
components:
  schemas:
    UserDetails:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
        - username
    Customer:
      type: object
      properties:
        customer_id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        address:
          type: string
          maxLength: 255
        phone:
          type: string
          maxLength: 20
      required:
        - name
        - address
        - phone
    Product:
      type: object
      properties:
        product_id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        price:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100000000
          minimum: -100000000
      required:
        - name
        - description
        - price
    Order:
      type: object
      properties:
        order_id:
          type: integer
          readOnly: true
        items:
          type: array
          items:
            type: object
            properties:
              order_item_id:
                type: integer
                readOnly: true
              quantity:
                type: integer
                maximum: 2147483647
                minimum: 0
              price:
                type: string
                format: decimal
                multipleOf: 0.01
                maximum: 100000000
                minimum: -100000000
              order:
                type: integer
              product:
                type: integer
            required:
              - quantity
              - price
              - order
              - product
        order_date:
          type: string
          format: date-time
          readOnly: true
        customer:
          type: integer
      required:
        - items
        - customer
    PasswordReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    PasswordResetConfirm:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
        - new_password1
        - new_password2
        - uid
        - token
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
        - new_password1
        - new_password2
    TokenVerify:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    CookieTokenRefresh:
      type: object
      properties:
        refresh:
          type: string
          description: WIll override cookie.
        access:
          type: string
          readOnly: true
